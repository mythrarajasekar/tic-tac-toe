#include<stdio.h>
#include<stdlib.h>
#include<time.h>
int won = 0;
#define max(a,b) (((a) > (b)) ? (a) : (b))
#define min(a,b) (((a) > (b)) ? (b) : (a))
typedef enum { false, true } bool;
struct move {
	int x;
	int y;
}move;
char computer = 'X';
char user = 'O';
void rules () 
{	
	printf("TIC TAC TOE\n");
	printf("MULTIPLAYER GAME\n");
	printf("Rules are simple, 3 X's or O's in a row (vertical, horizontal and diagonal)\nEG: X wins belows\n");	
	printf("X\tO\tO\nX\tX\tX\nO\tO\tX\n");
}

void board_initialization (char board[3][3]) {

	/* To initialize every cell as '_' */
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			board[i][j] = '_';
		}
	}
} 

void check_board (char board[3][3]) {	
	
	int i=0, j=0;

	char move[2] = {'X','O'};

	/* Checking all the 8 win conditions */
	for (int cntr = 0; cntr < 2; cntr++) {	
		if (((board[i][j]==move[cntr]) && (board[i][j+1]==move[cntr]) && (board[i][j+2]==move[cntr])) || ((board[i][j]==move[cntr]) && (board[i+1][j]==move[cntr]) && (board[i+2][j]==move[cntr])) || ((board[i][j]==move[cntr]) && (board[i+1][j+1]==move[cntr]) && (board[i+2][j+2]==move[cntr])) || ((board[i][j+2]==move[cntr]) && (board[i+1][j+1]==move[cntr]) && (board[i+2][j]==move[cntr])) || ((board[i][j+2]==move[cntr]) && (board[i+1][j+2]==move[cntr]) && (board[i+2][j+2]==move[cntr])) || ((board[i][j+1]==move[cntr]) && (board[i+1][j+1]==move[cntr]) && (board[i+2][j+1]==move[cntr])) || ((board[i+1][j]==move[cntr]) && (board[i+1][j+1]==move[cntr]) && (board[i+1][j+2]==move[cntr])) || ((board[i+2][j]==move[cntr]) && (board[i+2][j+1]==move[cntr]) && (board[i+2][j+2]==move[cntr]))) {		
			printf("\n%c WON\nCONGRATS %c\n", move[cntr], move[cntr]);
			won++;
			break;
		}
	}	
}

int is_valid (int move_x, int move_y, char board[3][3]) 
{
	if (move_x > 2 || move_x < 0 || move_y > 2 || move_y < 0) 
		return false;

	if (board [move_x][move_y] == 'O' || board [move_x][move_y] == 'X')
		return false;

	return true;
}

void print_board (char board[3][3]) 
{	
	
	for(int i=0;i<3;i++) {
		for(int j=0;j<3;j++) {
			printf("%c\t",board[i][j]);
		}
		printf("\n");
	}		
}

int move_verification (char board[3][3])
{
	
	for (int i = 0; i < 3; i++) 
		for (int j = 0; j < 3; j++) 
			if (board[i][j] == '_')
				return true;
	return false;
}

int evaluation (char board[3][3]) 
{

	for (int row = 0; row < 3; row++) {
		if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
			if (board[row][0] == computer)
				return +10;
			else if (board[row][0] == user)
				return -10;
		}
	}

	
	for (int col = 0; col < 3; col++)
	{
		if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
			if (board[0][col] == computer)
				return +10;
			else if (board[0][col] == user)
				return -10;
		}
	}

	if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
		if (board[0][0] == computer)
			return +10;
		else if (board[0][0] == user)
			return -10;
	}

	if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
		if (board[0][2] == computer)
			return +10;
		else if (board[0][2] == user)
			return -10;
	}


	return 0;
}

int minimax (char board[3][3], int depth, int isMax) 
{

	int score = evaluation(board);

	if (score == 10)
		return score;

	
	if (score == -10)
		return score;

	
	if (move_verification(board) == false)
		return 0;


	if (isMax == 1) 
	{

		
		int best = -1000;

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (board[i][j]=='_') {
					
					board[i][j] = computer; 
					best = max(best, minimax(board,depth+1,0)); 
					
					board[i][j] = '_'; 
				}
			}
		}
		return best; 
	}

	else {

	
		int best = 1000;

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (board[i][j]=='_') {
					
					board[i][j] = user; 
					best = min(best, minimax(board,depth+1,1));
					
					board[i][j] = '_'; 
					
				}
			}
		} 
		return best; 
	}
}

void computer_plays (char board[3][3]) {

	
	struct move play;
	play.x = -1;
	play.y = -1;

	
	int best_val = -1000;

	for (int i = 0; i < 3; i++) {

		for (int j = 0; j < 3; j++) {

			/* If a move is valid, try it */ 
			if (board[i][j] == '_') {
				
				board[i][j] = computer; 

				int move_val = minimax(board, 0, 0); 

				board[i][j] = '_'; 

				
				if (move_val > best_val) {
					best_val = move_val;
					play.x = i;
					play.y = j;
				}
			}
		}
	}

	
	board[play.x][play.y] = computer;
}

void user_plays (char board[3][3]) {

	
	struct move play;
	play.x = -1;
	play.y = -1;

	
	printf("\nEnter the x and y co-ordinate of your move rows-(0-2) col-(0-2) : ");
	scanf("%d%d", &play.x, &play.y);

	
	if (is_valid(play.x, play.y, board) == true) 
		board[play.x][play.y] = user;

	else {
		printf("Not A Valid Move!\n");
		user_plays(board);
	}
}

void computer_move (char board[3][3]) {

	
	printf("\nComputer is playing it's move ...\n");
	computer_plays(board);
	check_board(board);	
	print_board(board);
}

void user_move (char board[3][3]) {

	user_plays(board);
	check_board(board);
	print_board(board);
}

int toss (void) {

	printf("Time for the toss: \n");
	
	
	srand(time(NULL));
	int toss = rand() % 2;

	if (toss == 0)
		printf("User wins the toss ! Play first MATE !\n");

	else if (toss == 1)
		printf("Computer wins the toss ! Let me begin!\n");

	return toss;
}

void gameplay (char board[3][3], int toss) {


	while (won != 1 && move_verification(board) == true) {

		
		if (toss == 0) {
			user_move(board);
			if (won == 1)
				break;
			toss = 1;
			continue;
		}		

	
		else if (move_verification(board) == false) {
			printf("It's a draw !\n");
			break;
		}

		
		else if (toss == 1) {
			computer_move(board);
			if (won == 1)
				break;
			toss = 0;
		}
	}

	
	if (toss==0)
		printf("It's a draw !\n");
}

int main (void) {
	
	char board[3][3]; 
	rules();
	board_initialization(board);
	print_board(board);
	gameplay(board, toss());

	return 0;
}
